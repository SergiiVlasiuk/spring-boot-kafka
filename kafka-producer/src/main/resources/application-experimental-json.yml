# this experimental configuration for checking JsonSerializer.
kafka-conf:
  group-id: kafka-group
  private-case-topic: private_case_topic
  different-information-topic: different_information_topic
  report-details-topic: report_details_topic
  server: localhost:9092
  schema-registry: http://localhost:8081

server:
  port: 8091

spring:
  kafka:
    producer:
      transactions: true
      bootstrap-servers: ${kafka-conf.server}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
#      properties:
#        auto.register.schemas: true
#        schema.registry.url: http://localhost:8081
    consumer:
      group-id: kafka-group
      auto-offset-reset: earliest
      enable-auto-commit: true
      bootstrap-servers: ${kafka-conf.server}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
#        schema.registry.url: http://localhost:8081
        isolation.level: read_committed
        max.poll.interval.ms: 3000
        value.deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#        spring.deserializer.value.delegate.class: io.confluent.kafka.serializers.KafkaAvroDeserializer
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: com.vl.producer.kafka

    admin:
      fail-fast: true
#    properties:
#      acks: all
#      retries: 2
#    transactions:
#      transaction-id-prefix: transaction-id-prefix
