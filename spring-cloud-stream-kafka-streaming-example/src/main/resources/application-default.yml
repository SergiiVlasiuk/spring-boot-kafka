# working example
kafka-conf:
  group: default-demo-streams
  consume-topic-report-details: report_details_topic
  report-details-dlq: report_details_dlq
  produce-topic-report-details: report_details_topic_redirect
  consume-topic-report: report_topic
  report-dlq: report_dlq
  produce-topic-report: report_topic_redirect
  schema: http://localhost:8081

spring:
  application:
    name: ${kafka-conf.group}-streaming
  cloud:
    function:
      definition: reportDetails;report
    stream:
      bindings:
        reportDetails-in-0:
          destination: ${kafka-conf.consume-topic-report-details}
        reportDetails-out-0:
          destination: ${kafka-conf.produce-topic-report-details}
        report-in-0:
          destination: ${kafka-conf.consume-topic-report}
        report-out-0:
          destination: ${kafka-conf.produce-topic-report}
      kafka:
        default:
          producer:
            configuration:
              schema.registry.url: ${kafka-conf.schema}
              key.serializer: org.apache.kafka.common.serialization.StringSerializer
              value.serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
#                value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
              value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
          consumer:
            configuration:
              schema.registry.url: ${kafka-conf.schema}
              key.deserializer: org.apache.kafka.common.serialization.StringDeserializer
              value.deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
#                value.subject.name.strategy: io.confluent.kafka.serializers.subject.TopicRecordNameStrategy
              value.subject.name.strategy: io.confluent.kafka.serializers.subject.RecordNameStrategy
              specific.avro.reader: true

        binder:
          brokers: ${kafka-conf.server}

logging:
  level:
    com.github.ulisesbocchio: INFO
    com.vl.streaming: DEBUG
